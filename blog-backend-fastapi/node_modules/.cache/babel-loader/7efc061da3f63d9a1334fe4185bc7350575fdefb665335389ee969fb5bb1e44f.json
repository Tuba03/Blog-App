{"ast":null,"code":"// src/services/apiService.js\n// This file handles all communication with the backend API.\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nconst apiService = {\n  // Login a user and get a token\n  login: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed.');\n    }\n    return response.json();\n  },\n  // Register a new user\n  signup: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Registration failed.');\n    }\n    return response.json();\n  },\n  // Fetch the current user's profile\n  fetchProfile: async token => {\n    const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to fetch profile.');\n    }\n    return response.json();\n  },\n  // Fetch all blogs\n  fetchAllBlogs: async () => {\n    const response = await fetch(`${API_BASE_URL}/blogs`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to fetch blogs.');\n    }\n    return response.json();\n  },\n  // Fetch blogs by the current user\n  fetchMyBlogs: async token => {\n    const response = await fetch(`${API_BASE_URL}/blogs/my`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to fetch your blogs.');\n    }\n    return response.json();\n  },\n  // Create a new blog post\n  createBlog: async (token, title, content) => {\n    const response = await fetch(`${API_BASE_URL}/blogs/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        title,\n        content\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to create blog.');\n    }\n    return response.json();\n  }\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","apiService","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","signup","fetchProfile","token","fetchAllBlogs","fetchMyBlogs","createBlog","title","content"],"sources":["/Users/tuba/Downloads/Blog-App-master/src/services/apiService.js"],"sourcesContent":["// src/services/apiService.js\n// This file handles all communication with the backend API.\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nconst apiService = {\n  // Login a user and get a token\n  login: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Login failed.');\n    }\n    return response.json();\n  },\n\n  // Register a new user\n  signup: async (email, password) => {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Registration failed.');\n    }\n    return response.json();\n  },\n\n  // Fetch the current user's profile\n  fetchProfile: async (token) => {\n    const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n      method: 'GET',\n      headers: { 'Authorization': `Bearer ${token}` },\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to fetch profile.');\n    }\n    return response.json();\n  },\n\n  // Fetch all blogs\n  fetchAllBlogs: async () => {\n    const response = await fetch(`${API_BASE_URL}/blogs`);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to fetch blogs.');\n    }\n    return response.json();\n  },\n\n  // Fetch blogs by the current user\n  fetchMyBlogs: async (token) => {\n    const response = await fetch(`${API_BASE_URL}/blogs/my`, {\n      method: 'GET',\n      headers: { 'Authorization': `Bearer ${token}` },\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to fetch your blogs.');\n    }\n    return response.json();\n  },\n\n  // Create a new blog post\n  createBlog: async (token, title, content) => {\n    const response = await fetch(`${API_BASE_URL}/blogs/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n      body: JSON.stringify({ title, content }),\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || 'Failed to create blog.');\n    }\n    return response.json();\n  }\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}