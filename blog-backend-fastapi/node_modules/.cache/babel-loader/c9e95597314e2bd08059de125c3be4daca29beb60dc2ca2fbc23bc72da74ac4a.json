{"ast":null,"code":"var _jsxFileName = \"/Users/tuba/Downloads/Blog-App-master/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Login from './pages/Login';\nimport Profile from './pages/ProfilePage';\n\n/**\n * App component manages the main application flow and routing.\n * It checks for a token in local storage to decide which view to show.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to track if the user is authenticated\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Effect hook to check for the authentication token on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  /**\n   * Simple routing logic based on the URL path.\n   * In a real app, you would use a dedicated library like React Router.\n   */\n  const renderContent = () => {\n    switch (window.location.pathname) {\n      case '/profile':\n        // If authenticated, show the profile page\n        if (isAuthenticated) {\n          return /*#__PURE__*/_jsxDEV(Profile, {\n            onLogout: () => setIsAuthenticated(false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 18\n          }, this);\n        }\n        // Otherwise, redirect to the login page\n        return /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: () => setIsAuthenticated(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: () => setIsAuthenticated(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen font-sans antialiased text-gray-800 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto p-4 md:p-8 bg-white rounded-lg shadow-xl max-w-2xl mt-10\",\n      children: renderContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JkS3Meyzlj18m4l86SBr9YDqEkQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Profile","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","renderContent","window","location","pathname","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","className","children","_c","$RefreshReg$"],"sources":["/Users/tuba/Downloads/Blog-App-master/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Login from './pages/Login';\nimport Profile from './pages/ProfilePage';\n\n/**\n * App component manages the main application flow and routing.\n * It checks for a token in local storage to decide which view to show.\n */\nfunction App() {\n  // State to track if the user is authenticated\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Effect hook to check for the authentication token on initial load\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  /**\n   * Simple routing logic based on the URL path.\n   * In a real app, you would use a dedicated library like React Router.\n   */\n  const renderContent = () => {\n    switch (window.location.pathname) {\n      case '/profile':\n        // If authenticated, show the profile page\n        if (isAuthenticated) {\n          return <Profile onLogout={() => setIsAuthenticated(false)} />;\n        }\n        // Otherwise, redirect to the login page\n        return <Login onLogin={() => setIsAuthenticated(true)} />;\n      default:\n        return <Login onLogin={() => setIsAuthenticated(true)} />;\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-100 min-h-screen font-sans antialiased text-gray-800 p-4\">\n      {/* Main content container */}\n      <div className=\"container mx-auto p-4 md:p-8 bg-white rounded-lg shadow-xl max-w-2xl mt-10\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,OAAO,MAAM,qBAAqB;;AAEzC;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;AACA;EACE,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1B,QAAQC,MAAM,CAACC,QAAQ,CAACC,QAAQ;MAC9B,KAAK,UAAU;QACb;QACA,IAAIR,eAAe,EAAE;UACnB,oBAAOH,OAAA,CAACF,OAAO;YAACc,QAAQ,EAAEA,CAAA,KAAMR,kBAAkB,CAAC,KAAK;UAAE;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAC/D;QACA;QACA,oBAAOhB,OAAA,CAACH,KAAK;UAACoB,OAAO,EAAEA,CAAA,KAAMb,kBAAkB,CAAC,IAAI;QAAE;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAC3D;QACE,oBAAOhB,OAAA,CAACH,KAAK;UAACoB,OAAO,EAAEA,CAAA,KAAMb,kBAAkB,CAAC,IAAI;QAAE;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;IAC7D;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKkB,SAAS,EAAC,kEAAkE;IAAAC,QAAA,eAE/EnB,OAAA;MAAKkB,SAAS,EAAC,4EAA4E;MAAAC,QAAA,EACxFX,aAAa,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACd,EAAA,CAtCQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}