{"ast":null,"code":"// import axios from \"axios\";\n// export const BASE_URL='http://localhost:3000'; //we need to change this address\n\n// export const myAxios=axios.create({\n//     baseURL:BASE_URL,\n// })\n\n// import axios from \"axios\";\n// export const API_BASE_URL=\"http://100.28.49.102:9090\";\n\n// export const myAxios =axios.create({\n//     baseURL: API_BASE_URL,\n// })\n\n// services/Helper.js\n\nimport axios from 'axios';\n\n// Create an instance of Axios\nexport const myAxios = axios.create({\n  baseURL: 'http://100.28.49.102:9090',\n  timeout: 10000,\n  // Adjust timeout as needed\n  withCredentials: true // Include credentials for cross-origin requests\n});\n\n// Request interceptor to attach the token\nmyAxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor to handle token refresh\nmyAxios.interceptors.response.use(response => response, async error => {\n  const {\n    config,\n    response\n  } = error;\n  if (response && response.status === 401 && !config.__isRetryRequest) {\n    // Check if the request is not a retry request\n    config.__isRetryRequest = true;\n\n    // try {\n    //     // Attempt to refresh the token\n    //     const refreshResponse = await axios.post('http://localhost:3000/api/refresh-token', {}, { withCredentials: true });\n    //     const newToken = refreshResponse.data.token;\n    //     localStorage.setItem('authToken', newToken);\n\n    //     // Update the original request with the new token and retry\n    //     config.headers['Authorization'] = `Bearer ${newToken}`;\n    //     return myAxios(config);\n    // } catch (refreshError) {\n    //     console.error('Failed to refresh token:', refreshError);\n    //     // Handle token refresh failure, e.g., redirect to login page\n    //     // Redirect or clear user session as needed\n    //     window.location.href = '/login';\n    //     return Promise.reject(refreshError);\n    // }\n  }\n  return Promise.reject(error);\n});\n\n// export const privateAxios=axios.create({\n//     baseURL:BASE_URL\n//     return\n// })","map":{"version":3,"names":["axios","myAxios","create","baseURL","timeout","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","status","__isRetryRequest"],"sources":["/Users/ak/Downloads/Blog-App-master/src/services/Helper.js"],"sourcesContent":["// import axios from \"axios\";\r\n// export const BASE_URL='http://localhost:3000'; //we need to change this address\r\n\r\n// export const myAxios=axios.create({\r\n//     baseURL:BASE_URL,\r\n// })\r\n\r\n\r\n\r\n// import axios from \"axios\";\r\n// export const API_BASE_URL=\"http://100.28.49.102:9090\";\r\n\r\n// export const myAxios =axios.create({\r\n//     baseURL: API_BASE_URL,\r\n// })\r\n\r\n\r\n// services/Helper.js\r\n\r\nimport axios from 'axios';\r\n\r\n// Create an instance of Axios\r\nexport const myAxios = axios.create({\r\n    baseURL: 'http://100.28.49.102:9090', \r\n    timeout: 10000, // Adjust timeout as needed\r\n    withCredentials: true, // Include credentials for cross-origin requests\r\n});\r\n\r\n// Request interceptor to attach the token\r\nmyAxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\n\r\n// Response interceptor to handle token refresh\r\nmyAxios.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const { config, response } = error;\r\n        if (response && response.status === 401 && !config.__isRetryRequest) {\r\n            // Check if the request is not a retry request\r\n            config.__isRetryRequest = true;\r\n\r\n            // try {\r\n            //     // Attempt to refresh the token\r\n            //     const refreshResponse = await axios.post('http://localhost:3000/api/refresh-token', {}, { withCredentials: true });\r\n            //     const newToken = refreshResponse.data.token;\r\n            //     localStorage.setItem('authToken', newToken);\r\n\r\n            //     // Update the original request with the new token and retry\r\n            //     config.headers['Authorization'] = `Bearer ${newToken}`;\r\n            //     return myAxios(config);\r\n            // } catch (refreshError) {\r\n            //     console.error('Failed to refresh token:', refreshError);\r\n            //     // Handle token refresh failure, e.g., redirect to login page\r\n            //     // Redirect or clear user session as needed\r\n            //     window.location.href = '/login';\r\n            //     return Promise.reject(refreshError);\r\n            // }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// export const privateAxios=axios.create({\r\n//     baseURL:BASE_URL\r\n//     return\r\n// })\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAChCC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE,KAAK;EAAE;EAChBC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACAJ,OAAO,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACnC,CAAC;;AAGD;AACAb,OAAO,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC5BS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACb,MAAM;IAAEL,MAAM;IAAEQ;EAAS,CAAC,GAAGH,KAAK;EAClC,IAAIG,QAAQ,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAI,CAACT,MAAM,CAACU,gBAAgB,EAAE;IACjE;IACAV,MAAM,CAACU,gBAAgB,GAAG,IAAI;;IAE9B;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;EAEA,OAAOJ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}