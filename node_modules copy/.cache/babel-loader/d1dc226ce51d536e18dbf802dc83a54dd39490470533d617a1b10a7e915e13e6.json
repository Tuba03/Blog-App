{"ast":null,"code":"// // src/services/apiService.js\n// // This file handles all communication with the backend API.\n\n// const API_BASE_URL = 'http://127.0.0.1:8000';\n\n// const apiService = {\n//   // Login a user and get a token\n//   login: async (email, password) => {\n//     const response = await fetch(`${API_BASE_URL}/auth/login`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ email, password }),\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Login failed.');\n//     }\n//     return response.json();\n//   },\n\n//   // Register a new user\n//   signup: async (email, password) => {\n//     const response = await fetch(`${API_BASE_URL}/auth/register`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ email, password }),\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Registration failed.');\n//     }\n//     return response.json();\n//   },\n\n//   // Fetch the current user's profile\n//   fetchProfile: async (token) => {\n//     const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n//       method: 'GET',\n//       headers: { 'Authorization': `Bearer ${token}` },\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to fetch profile.');\n//     }\n//     return response.json();\n//   },\n\n//   // Fetch all blogs\n//   fetchAllBlogs: async () => {\n//     const response = await fetch(`${API_BASE_URL}/blogs`);\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to fetch blogs.');\n//     }\n//     return response.json();\n//   },\n\n//   // Fetch blogs by the current user\n//   fetchMyBlogs: async (token) => {\n//     const response = await fetch(`${API_BASE_URL}/blogs/my`, {\n//       method: 'GET',\n//       headers: { 'Authorization': `Bearer ${token}` },\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to fetch your blogs.');\n//     }\n//     return response.json();\n//   },\n\n//   // Create a new blog post\n//   createBlog: async (token, title, content) => {\n//     const response = await fetch(`${API_BASE_URL}/blogs/`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${token}`,\n//       },\n//       body: JSON.stringify({ title, content }),\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to create blog.');\n//     }\n//     return response.json();\n//   }\n// };\n\n// export default apiService;\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\nconst getHeaders = (token = null) => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\n\n// Function to handle API responses\nconst handleResponse = async response => {\n  if (response.ok) {\n    const text = await response.text();\n    return text ? JSON.parse(text) : {};\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || 'An unexpected error occurred');\n  }\n};\nconst loginUser = async (email, password) => {\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: getHeaders(),\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  return handleResponse(response);\n};\nconst signupUser = async (email, password) => {\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: getHeaders(),\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  return handleResponse(response);\n};\nconst getProfile = async (token, userId = null) => {\n  const url = userId ? `${API_BASE_URL}/auth/profile/${userId}` : `${API_BASE_URL}/auth/profile`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: getHeaders(token)\n  });\n  return handleResponse(response);\n};\nconst updateProfile = async (token, newName, newPhoto) => {\n  const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n    method: 'PUT',\n    headers: getHeaders(token),\n    body: JSON.stringify({\n      name: newName,\n      profile_photo: newPhoto\n    })\n  });\n  return handleResponse(response);\n};\nconst createBlog = async (title, content, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/`, {\n    method: 'POST',\n    headers: getHeaders(token),\n    body: JSON.stringify({\n      title,\n      content\n    })\n  });\n  return handleResponse(response);\n};\nconst getAllBlogs = async () => {\n  const response = await fetch(`${API_BASE_URL}/blogs/`, {\n    method: 'GET',\n    headers: getHeaders()\n  });\n  return handleResponse(response);\n};\nconst getMyBlogs = async token => {\n  const response = await fetch(`${API_BASE_URL}/blogs/my`, {\n    method: 'GET',\n    headers: getHeaders(token)\n  });\n  return handleResponse(response);\n};\nconst getBlogById = async (blogId, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}`, {\n    method: 'GET',\n    headers: getHeaders(token)\n  });\n  return handleResponse(response);\n};\nconst addCommentToBlog = async (blogId, comment, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}/comments`, {\n    method: 'POST',\n    headers: getHeaders(token),\n    body: JSON.stringify({\n      content: comment\n    })\n  });\n  return handleResponse(response);\n};\nconst likeBlog = async (blogId, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}/like`, {\n    method: 'POST',\n    headers: getHeaders(token)\n  });\n  return handleResponse(response);\n};\nconst saveBlog = async (blogId, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}/save`, {\n    method: 'POST',\n    headers: getHeaders(token)\n  });\n  return handleResponse(response);\n};\nconst followUser = async (userId, token) => {\n  const response = await fetch(`${API_BASE_URL}/users/${userId}/follow`, {\n    method: 'POST',\n    headers: getHeaders(token)\n  });\n  return handleResponse(response);\n};","map":{"version":3,"names":["API_BASE_URL","getHeaders","token","headers","handleResponse","response","ok","text","JSON","parse","errorData","json","Error","detail","loginUser","email","password","fetch","method","body","stringify","signupUser","getProfile","userId","url","updateProfile","newName","newPhoto","name","profile_photo","createBlog","title","content","getAllBlogs","getMyBlogs","getBlogById","blogId","addCommentToBlog","comment","likeBlog","saveBlog","followUser"],"sources":["/Users/tuba/Downloads/Blog-App-master/src/services/apiService.js"],"sourcesContent":["// // src/services/apiService.js\n// // This file handles all communication with the backend API.\n\n// const API_BASE_URL = 'http://127.0.0.1:8000';\n\n// const apiService = {\n//   // Login a user and get a token\n//   login: async (email, password) => {\n//     const response = await fetch(`${API_BASE_URL}/auth/login`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ email, password }),\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Login failed.');\n//     }\n//     return response.json();\n//   },\n\n//   // Register a new user\n//   signup: async (email, password) => {\n//     const response = await fetch(`${API_BASE_URL}/auth/register`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ email, password }),\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Registration failed.');\n//     }\n//     return response.json();\n//   },\n\n//   // Fetch the current user's profile\n//   fetchProfile: async (token) => {\n//     const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n//       method: 'GET',\n//       headers: { 'Authorization': `Bearer ${token}` },\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to fetch profile.');\n//     }\n//     return response.json();\n//   },\n\n//   // Fetch all blogs\n//   fetchAllBlogs: async () => {\n//     const response = await fetch(`${API_BASE_URL}/blogs`);\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to fetch blogs.');\n//     }\n//     return response.json();\n//   },\n\n//   // Fetch blogs by the current user\n//   fetchMyBlogs: async (token) => {\n//     const response = await fetch(`${API_BASE_URL}/blogs/my`, {\n//       method: 'GET',\n//       headers: { 'Authorization': `Bearer ${token}` },\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to fetch your blogs.');\n//     }\n//     return response.json();\n//   },\n\n//   // Create a new blog post\n//   createBlog: async (token, title, content) => {\n//     const response = await fetch(`${API_BASE_URL}/blogs/`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': `Bearer ${token}`,\n//       },\n//       body: JSON.stringify({ title, content }),\n//     });\n//     if (!response.ok) {\n//       const errorData = await response.json();\n//       throw new Error(errorData.detail || 'Failed to create blog.');\n//     }\n//     return response.json();\n//   }\n// };\n\n// export default apiService;\n\n\nconst API_BASE_URL = 'http://127.0.0.1:8000';\n\nconst getHeaders = (token = null) => {\n  const headers = {\n    'Content-Type': 'application/json',\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\n\n// Function to handle API responses\nconst handleResponse = async (response) => {\n  if (response.ok) {\n    const text = await response.text();\n    return text ? JSON.parse(text) : {};\n  } else {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || 'An unexpected error occurred');\n  }\n};\n\nconst loginUser = async (email, password) => {\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: 'POST',\n    headers: getHeaders(),\n    body: JSON.stringify({ email, password }),\n  });\n  return handleResponse(response);\n};\n\nconst signupUser = async (email, password) => {\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\n    method: 'POST',\n    headers: getHeaders(),\n    body: JSON.stringify({ email, password }),\n  });\n  return handleResponse(response);\n};\n\nconst getProfile = async (token, userId = null) => {\n  const url = userId ? `${API_BASE_URL}/auth/profile/${userId}` : `${API_BASE_URL}/auth/profile`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: getHeaders(token),\n  });\n  return handleResponse(response);\n};\n\nconst updateProfile = async (token, newName, newPhoto) => {\n  const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n    method: 'PUT',\n    headers: getHeaders(token),\n    body: JSON.stringify({ name: newName, profile_photo: newPhoto }),\n  });\n  return handleResponse(response);\n};\n\nconst createBlog = async (title, content, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/`, {\n    method: 'POST',\n    headers: getHeaders(token),\n    body: JSON.stringify({ title, content }),\n  });\n  return handleResponse(response);\n};\n\nconst getAllBlogs = async () => {\n  const response = await fetch(`${API_BASE_URL}/blogs/`, {\n    method: 'GET',\n    headers: getHeaders(),\n  });\n  return handleResponse(response);\n};\n\nconst getMyBlogs = async (token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/my`, {\n    method: 'GET',\n    headers: getHeaders(token),\n  });\n  return handleResponse(response);\n};\n\nconst getBlogById = async (blogId, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}`, {\n    method: 'GET',\n    headers: getHeaders(token),\n  });\n  return handleResponse(response);\n};\n\nconst addCommentToBlog = async (blogId, comment, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}/comments`, {\n    method: 'POST',\n    headers: getHeaders(token),\n    body: JSON.stringify({ content: comment }),\n  });\n  return handleResponse(response);\n};\n\nconst likeBlog = async (blogId, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}/like`, {\n    method: 'POST',\n    headers: getHeaders(token),\n  });\n  return handleResponse(response);\n};\n\nconst saveBlog = async (blogId, token) => {\n  const response = await fetch(`${API_BASE_URL}/blogs/${blogId}/save`, {\n    method: 'POST',\n    headers: getHeaders(token),\n  });\n  return handleResponse(response);\n};\n\nconst followUser = async (userId, token) => {\n  const response = await fetch(`${API_BASE_URL}/users/${userId}/follow`, {\n    method: 'POST',\n    headers: getHeaders(token),\n  });\n  return handleResponse(response);\n};"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,UAAU,GAAGA,CAACC,KAAK,GAAG,IAAI,KAAK;EACnC,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE;EAClB,CAAC;EACD,IAAID,KAAK,EAAE;IACTC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;EAC9C;EACA,OAAOC,OAAO;AAChB,CAAC;;AAED;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,IAAIA,QAAQ,CAACC,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;IAClC,OAAOA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,GAAG,CAAC,CAAC;EACrC,CAAC,MAAM;IACL,MAAMG,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,8BAA8B,CAAC;EACrE;AACF,CAAC;AAED,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,MAAMX,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,aAAa,EAAE;IACzDkB,MAAM,EAAE,MAAM;IACdf,OAAO,EAAEF,UAAU,CAAC,CAAC;IACrBkB,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOZ,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMgB,UAAU,GAAG,MAAAA,CAAON,KAAK,EAAEC,QAAQ,KAAK;EAC5C,MAAMX,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,gBAAgB,EAAE;IAC5DkB,MAAM,EAAE,MAAM;IACdf,OAAO,EAAEF,UAAU,CAAC,CAAC;IACrBkB,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOZ,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMiB,UAAU,GAAG,MAAAA,CAAOpB,KAAK,EAAEqB,MAAM,GAAG,IAAI,KAAK;EACjD,MAAMC,GAAG,GAAGD,MAAM,GAAG,GAAGvB,YAAY,iBAAiBuB,MAAM,EAAE,GAAG,GAAGvB,YAAY,eAAe;EAC9F,MAAMK,QAAQ,GAAG,MAAMY,KAAK,CAACO,GAAG,EAAE;IAChCN,MAAM,EAAE,KAAK;IACbf,OAAO,EAAEF,UAAU,CAACC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAOE,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMoB,aAAa,GAAG,MAAAA,CAAOvB,KAAK,EAAEwB,OAAO,EAAEC,QAAQ,KAAK;EACxD,MAAMtB,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,eAAe,EAAE;IAC3DkB,MAAM,EAAE,KAAK;IACbf,OAAO,EAAEF,UAAU,CAACC,KAAK,CAAC;IAC1BiB,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;MAAEQ,IAAI,EAAEF,OAAO;MAAEG,aAAa,EAAEF;IAAS,CAAC;EACjE,CAAC,CAAC;EACF,OAAOvB,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMyB,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,OAAO,EAAE9B,KAAK,KAAK;EAClD,MAAMG,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,SAAS,EAAE;IACrDkB,MAAM,EAAE,MAAM;IACdf,OAAO,EAAEF,UAAU,CAACC,KAAK,CAAC;IAC1BiB,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;MAAEW,KAAK;MAAEC;IAAQ,CAAC;EACzC,CAAC,CAAC;EACF,OAAO5B,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAM4B,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAM5B,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,SAAS,EAAE;IACrDkB,MAAM,EAAE,KAAK;IACbf,OAAO,EAAEF,UAAU,CAAC;EACtB,CAAC,CAAC;EACF,OAAOG,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAM6B,UAAU,GAAG,MAAOhC,KAAK,IAAK;EAClC,MAAMG,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,WAAW,EAAE;IACvDkB,MAAM,EAAE,KAAK;IACbf,OAAO,EAAEF,UAAU,CAACC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAOE,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAM8B,WAAW,GAAG,MAAAA,CAAOC,MAAM,EAAElC,KAAK,KAAK;EAC3C,MAAMG,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,UAAUoC,MAAM,EAAE,EAAE;IAC9DlB,MAAM,EAAE,KAAK;IACbf,OAAO,EAAEF,UAAU,CAACC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAOE,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMgC,gBAAgB,GAAG,MAAAA,CAAOD,MAAM,EAAEE,OAAO,EAAEpC,KAAK,KAAK;EACzD,MAAMG,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,UAAUoC,MAAM,WAAW,EAAE;IACvElB,MAAM,EAAE,MAAM;IACdf,OAAO,EAAEF,UAAU,CAACC,KAAK,CAAC;IAC1BiB,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;MAAEY,OAAO,EAAEM;IAAQ,CAAC;EAC3C,CAAC,CAAC;EACF,OAAOlC,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMkC,QAAQ,GAAG,MAAAA,CAAOH,MAAM,EAAElC,KAAK,KAAK;EACxC,MAAMG,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,UAAUoC,MAAM,OAAO,EAAE;IACnElB,MAAM,EAAE,MAAM;IACdf,OAAO,EAAEF,UAAU,CAACC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAOE,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMmC,QAAQ,GAAG,MAAAA,CAAOJ,MAAM,EAAElC,KAAK,KAAK;EACxC,MAAMG,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,UAAUoC,MAAM,OAAO,EAAE;IACnElB,MAAM,EAAE,MAAM;IACdf,OAAO,EAAEF,UAAU,CAACC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAOE,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;AAED,MAAMoC,UAAU,GAAG,MAAAA,CAAOlB,MAAM,EAAErB,KAAK,KAAK;EAC1C,MAAMG,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGjB,YAAY,UAAUuB,MAAM,SAAS,EAAE;IACrEL,MAAM,EAAE,MAAM;IACdf,OAAO,EAAEF,UAAU,CAACC,KAAK;EAC3B,CAAC,CAAC;EACF,OAAOE,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}